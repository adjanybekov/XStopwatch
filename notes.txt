Right now, if the app restarts and the saved state indicates that we have a running stopwatch and/or timer,
we will only restart the appropriate notification when the user launches the app in question first.
Meanwhile, the watchface might be indicating that a timer and/or stopwatch are running. The problem
is that we can't just start up a notification for an activity that hasn't actually begun yet.

Given that the notifications are really a bad UI kludge, especially when we have a timer and a stopwatch
both running at the same time, we're going to leave this alone for now.

TODO make XStopwatch and XTimer be "always on"
  Basic API support is easy enough
     TODO just declare that we're supporting ambient mode, appropriate callbacks
     TODO set up alarm timer
     http://developer.android.com/training/wearables/apps/always-on.html
  TODO need to have a whole other rendering mode with black&white (no antialias)
  TODO add a small clock on top for ambient mode (recommended practice)
  TODO ambient layout: how to switch back and forth? fragments? programmatically change the current layout?
     -- crazy idea, make our StopwatchText widget be taller and overlapping with the existing widgets, play transparency games

TODO See if the TimePicker actually works under Marshmallow
-- nope, still busted

TODO Long term: ponder merging XStopwatch into CalWatch, using interactive watchface stuff

TODO deal with deprecated "addAction" API in Notification.Builder.addAction
-- initial attempt crashed with weird stack dumps, couldn't find the method

